cmake_minimum_required(VERSION 3.5)
project(${CMAKE_WORKSPACE_NAME}_functional)

find_package(BCM)
include(BCMDeploy)
include(BCMSetupVersion)

find_package(${CMAKE_WORKSPACE_NAME}_function)
find_package(${CMAKE_WORKSPACE_NAME}_core)
find_package(${CMAKE_WORKSPACE_NAME}_static_assert)
find_package(${CMAKE_WORKSPACE_NAME}_iterator)
find_package(${CMAKE_WORKSPACE_NAME}_typeof)
find_package(${CMAKE_WORKSPACE_NAME}_optional)
find_package(${CMAKE_WORKSPACE_NAME}_mpl)
find_package(${CMAKE_WORKSPACE_NAME}_function_types)
find_package(${CMAKE_WORKSPACE_NAME}_detail)
find_package(${CMAKE_WORKSPACE_NAME}_assert)
find_package(${CMAKE_WORKSPACE_NAME}_type_traits)
find_package(${CMAKE_WORKSPACE_NAME}_preprocessor)
find_package(${CMAKE_WORKSPACE_NAME}_integer)
find_package(${CMAKE_WORKSPACE_NAME}_config)
find_package(${CMAKE_WORKSPACE_NAME}_utility)

bcm_setup_version(VERSION 1.58.0)

add_library(${CMAKE_WORKSPACE_NAME}_functional INTERFACE)
set_property(TARGET ${CMAKE_WORKSPACE_NAME}_functional PROPERTY EXPORT_NAME functional)

target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::function)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::core)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::static_assert)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::iterator)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::typeof)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::optional)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::mpl)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::function_types)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::detail)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::assert)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::type_traits)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::preprocessor)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::integer)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::config)
target_link_libraries(${CMAKE_WORKSPACE_NAME}_functional INTERFACE boost::utility)


bcm_deploy(TARGETS ${CMAKE_WORKSPACE_NAME}_functional INCLUDE include NAMESPACE ${CMAKE_WORKSPACE_NAME}::)

add_subdirectory(test)
