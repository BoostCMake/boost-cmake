1,3c1
< add_definitions(-DBOOST_TEST_NO_AUTO_LINK=1)
< # shared needs:
< add_definitions(-DBOOST_TEST_DYN_LINK=1)
---
> include(BCMTest)
5,7c3,48
< if(BORLAND)
<   add_definitions(-w-8080)
< endif(BORLAND)
---
> find_package(${CMAKE_WORKSPACE_NAME}_multiprecision)
> find_package(${CMAKE_WORKSPACE_NAME}_thread)
> find_package(${CMAKE_WORKSPACE_NAME}_lexical_cast)
> find_package(${CMAKE_WORKSPACE_NAME}_unit_test_framework)
> find_package(${CMAKE_WORKSPACE_NAME}_thread)
> find_package(${CMAKE_WORKSPACE_NAME}_test)
> find_package(${CMAKE_WORKSPACE_NAME}_align)
> 
> bcm_test_link_libraries(boost::test
>                         boost::multiprecision
>                         boost::thread
>                         boost::lexical_cast
>                         boost::unit_test_framework
>                         boost::thread
>                         boost::align
>                         )
> 
> 
> bcm_test(NAME test_test_class_properties_test SOURCES class_properties_test.cpp)
> bcm_test(NAME test_test_basic_cstring_test SOURCES basic_cstring_test.cpp)
> 
> bcm_test(NAME test_test_prg_exec_fail1 SOURCES prg_exec_fail1.cpp WILL_FAIL)
> 
> if(NOT BUILD_SHARED_LIBS)
>     bcm_test(NAME test_test_prg_exec_fail2 SOURCES prg_exec_fail2.cpp WILL_FAIL)
>     bcm_test(NAME test_test_prg_exec_fail3 SOURCES prg_exec_fail3.cpp WILL_FAIL)
>     bcm_test(NAME test_test_prg_exec_fail4 SOURCES prg_exec_fail4.cpp WILL_FAIL)
> endif()
> 
> bcm_test(NAME test_test_errors_handling_test SOURCES errors_handling_test.cpp)
> bcm_test(NAME test_test_online_test SOURCES online_test.cpp)
> bcm_test(NAME test_test_minimal_test SOURCES minimal_test.cpp WILL_FAIL)
> bcm_test(NAME test_test_foreach_test SOURCES foreach_test.cpp)
> bcm_test(NAME test_test_output_test_stream_test SOURCES output_test_stream_test.cpp)
> bcm_test(NAME test_test_result_report_test SOURCES result_report_test.cpp)
> bcm_test(NAME test_test_parameterized_test_test SOURCES parameterized_test_test.cpp)
> bcm_test(NAME test_test_test_fp_comparisons SOURCES test_fp_comparisons.cpp)
> bcm_test(NAME test_test_test_tools_test SOURCES test_tools_test.cpp)
> bcm_test(NAME test_test_test_case_template_test SOURCES test_case_template_test.cpp)
> bcm_test(NAME test_test_custom_exception_test SOURCES custom_exception_test.cpp)
> bcm_test(NAME test_test_fixed_mapping_test SOURCES fixed_mapping_test.cpp)
> bcm_test(NAME test_test_ifstream_line_iterator_test SOURCES ifstream_line_iterator_test.cpp)
> bcm_test(NAME test_test_algorithms_test SOURCES algorithms_test.cpp)
> bcm_test(NAME test_test_token_iterator_test SOURCES token_iterator_test.cpp)
> bcm_test(NAME test_test_${CMAKE_WORKSPACE_NAME}_check_equal_str SOURCES ${CMAKE_WORKSPACE_NAME}_check_equal_str.cpp)
> bcm_test(NAME test_test_test_tree_management_test SOURCES test_tree_management_test.cpp)
9,43c50,51
< # Basic tests
< boost_test_run(class_properties_test DEPENDS boost_unit_test_framework SHARED)
< boost_test_run(basic_cstring_test DEPENDS boost_unit_test_framework)
< 
< # Program execution monitor tests
< boost_test_run_fail(prg_exec_fail1 DEPENDS boost_prg_exec_monitor)
< boost_test_run_fail(prg_exec_fail2 DEPENDS boost_prg_exec_monitor)
< boost_test_run_fail(prg_exec_fail3 DEPENDS boost_prg_exec_monitor)
< boost_test_run_fail(prg_exec_fail4 DEPENDS boost_prg_exec_monitor)
< 
< # Unit test framework tests
< # NOTE: skipped errors_handling_test until I figure out what BBv2 is doing
< boost_test_run(online_test)
< boost_test_run_fail(minimal_test)
< boost_test_run(foreach_test)
< boost_test_run(output_test_stream_test DEPENDS boost_unit_test_framework SHARED)
< 
< # NOTE: skipped result_report_test until I figure out what BBv2 is doing
< 
< boost_test_run(parameterized_test_test DEPENDS boost_unit_test_framework SHARED)
< boost_test_run(test_fp_comparisons DEPENDS boost_unit_test_framework SHARED)
< 
< # NOTE: skipped test_tools_test until I figure out what BBv2 is doing
< 
< boost_test_run(test_case_template_test DEPENDS boost_unit_test_framework SHARED)
< 
< boost_test_run(custom_exception_test DEPENDS boost_unit_test_framework)
< 
< boost_test_run(fixed_mapping_test DEPENDS boost_unit_test_framework SHARED)
< 
< # NOTE: skipped ifstream_line_iterator_test until I figure out what BBv2 is doing
< 
< boost_test_run(algorithms_test DEPENDS boost_unit_test_framework)
< boost_test_run(token_iterator_test DEPENDS boost_unit_test_framework SHARED)
< boost_test_run(boost_check_equal_str DEPENDS boost_unit_test_framework SHARED)
---
> bcm_test(NAME test_test_sync_access_test SOURCES sync_access_test.cpp)
> target_compile_definitions(test_test_sync_access_test PRIVATE -DBOOST_TEST_NO_AUTO_LINK=1)
\ No newline at end of file
