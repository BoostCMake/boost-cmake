6c6
< 
---
> #define BOOST_TEST_MAIN
26c26
< #include <boost/coroutine/asymmetric_coroutine.hpp>
---
> #include <boost/coroutine/asymmetric_coroutine_patched.hpp>
52c52
<         state( false)
---
>             state( false)
56c56
<         state( true)
---
>             state( true)
66c66
<     BOOST_MOVABLE_BUT_NOT_COPYABLE( moveable)
---
> BOOST_MOVABLE_BUT_NOT_COPYABLE( moveable)
72c72
<         state( false)
---
>             state( false)
76c76
<         state( true)
---
>             state( true)
80c80
<         state( false)
---
>             state( false)
199c199
<     { c( ptr); }
---
>                 { c( ptr); }
422,425c422,425
<             f12,
<             coro::attributes(
<                 coro::stack_allocator::traits_type::default_size(),
<                 coro::no_stack_unwind) );
---
>                 f12,
>                 coro::attributes(
>                         coro::stack_allocator::traits_type::default_size(),
>                         coro::no_stack_unwind) );
464c464
<         { vec.push_back( i); }
---
>                     { vec.push_back( i); }
477,478c477,478
<             coro::asymmetric_coroutine< int >::pull_type::iterator i = boost::begin( coro);
<             i != e; ++i)
---
>                 coro::asymmetric_coroutine< int >::pull_type::iterator i = boost::begin( coro);
>                 i != e; ++i)
497,498c497,498
<             coro::asymmetric_coroutine< int* >::pull_type::iterator i = boost::begin( coro);
<             i != e; ++i)
---
>                 coro::asymmetric_coroutine< int* >::pull_type::iterator i = boost::begin( coro);
>                 i != e; ++i)
515c515
<         boost::bind( f17, _1, boost::ref( vec) ) );
---
>             boost::bind( f17, _1, boost::ref( vec) ) );
541c541
<         catched = true; 
---
>         catched = true;
544a545
> 
600c601,668
< boost::unit_test::test_suite * init_unit_test_suite( int, char* [])
---
> BOOST_AUTO_TEST_SUITE(boost_coroutine_asymmetric_coroutine_test_suite)
> 
> BOOST_AUTO_TEST_CASE(test_move_case)
> {
>     test_move();
> }
> 
> BOOST_AUTO_TEST_CASE(test_complete_case)
> {
>     test_complete();
> }
> 
> BOOST_AUTO_TEST_CASE(test_jump_case)
> {
>     test_jump();
> }
> 
> BOOST_AUTO_TEST_CASE(test_result_int_case)
> {
>     test_result_int();
> }
> 
> BOOST_AUTO_TEST_CASE(test_result_string_case)
> {
>     test_result_string();
> }
> 
> BOOST_AUTO_TEST_CASE(test_arg_int_case)
> {
>     test_arg_int();
> }
> 
> BOOST_AUTO_TEST_CASE(test_arg_string_case)
> {
>     test_arg_string();
> }
> 
> BOOST_AUTO_TEST_CASE(test_fp_case)
> {
>     test_fp();
> }
> 
> BOOST_AUTO_TEST_CASE(test_ptr_case)
> {
>     test_ptr();
> }
> 
> BOOST_AUTO_TEST_CASE(test_const_ptr_case)
> {
>     test_const_ptr();
> }
> 
> BOOST_AUTO_TEST_CASE(test_invalid_result_case)
> {
>     test_invalid_result();
> }
> 
> BOOST_AUTO_TEST_CASE(test_ref_case)
> {
>     test_ref();
> }
> 
> BOOST_AUTO_TEST_CASE(test_const_ref_case)
> {
>     test_const_ref();
> }
> 
> BOOST_AUTO_TEST_CASE(test_tuple_case)
602,603c670,681
<     boost::unit_test::test_suite * test =
<         BOOST_TEST_SUITE("Boost.coroutine: asymmetric coroutine test suite");
---
>     test_tuple();
> }
> 
> BOOST_AUTO_TEST_CASE(test_unwind_case)
> {
>     test_unwind();
> }
> 
> BOOST_AUTO_TEST_CASE(test_no_unwind_case)
> {
>     test_no_unwind();
> }
605,624c683,686
<     test->add( BOOST_TEST_CASE( & test_move) );
<     test->add( BOOST_TEST_CASE( & test_complete) );
<     test->add( BOOST_TEST_CASE( & test_jump) );
<     test->add( BOOST_TEST_CASE( & test_result_int) );
<     test->add( BOOST_TEST_CASE( & test_result_string) );
<     test->add( BOOST_TEST_CASE( & test_arg_int) );
<     test->add( BOOST_TEST_CASE( & test_arg_string) );
<     test->add( BOOST_TEST_CASE( & test_fp) );
<     test->add( BOOST_TEST_CASE( & test_ptr) );
<     test->add( BOOST_TEST_CASE( & test_const_ptr) );
<     test->add( BOOST_TEST_CASE( & test_invalid_result) );
<     test->add( BOOST_TEST_CASE( & test_ref) );
<     test->add( BOOST_TEST_CASE( & test_const_ref) );
<     test->add( BOOST_TEST_CASE( & test_tuple) );
<     test->add( BOOST_TEST_CASE( & test_unwind) );
<     test->add( BOOST_TEST_CASE( & test_no_unwind) );
<     test->add( BOOST_TEST_CASE( & test_exceptions) );
<     test->add( BOOST_TEST_CASE( & test_input_iterator) );
<     test->add( BOOST_TEST_CASE( & test_output_iterator) );
<     test->add( BOOST_TEST_CASE( & test_range) );
---
> BOOST_AUTO_TEST_CASE(test_exceptions_case)
> {
>     test_exceptions();
> }
626c688,690
<     return test;
---
> BOOST_AUTO_TEST_CASE(test_input_iterator_case)
> {
>     test_input_iterator();
627a692,698
> 
> BOOST_AUTO_TEST_CASE(test_output_iterator_case)
> {
>     test_output_iterator();
> }
> 
> BOOST_AUTO_TEST_SUITE_END()
